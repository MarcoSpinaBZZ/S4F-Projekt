/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/tetris/page";
exports.ids = ["pages/tetris/page"];
exports.modules = {

/***/ "./pages/tetris/page.jsx":
/*!*******************************!*\
  !*** ./pages/tetris/page.jsx ***!
  \*******************************/
/***/ (() => {

eval("//  TODO:\n//    * touch controls\n//    * allow late piece rotation\n//    * code cleanup\n//--------------------------------------------------//\n//    PAGE OBJECT & LOGIC                           //\n//--------------------------------------------------//\nvar Page = {\n    IsSetup: false,\n    body: document.getElementsByTagName(\"body\")[0],\n    cvs: document.createElement(\"canvas\"),\n    ctx: 0,\n    unitSize: 0,\n    AreaArr: [],\n    // calculates the unit size, canvas bounds, and canvas positioning\n    WindowChanged: function() {\n        // Calulcate the unitSize based on window width and height.\n        // The minimum of these calculations will be used.\n        var bodyW = document.documentElement.clientWidth, bodyH = document.documentElement.clientHeight, newUnitW = (bodyW - bodyW % 80) / 16, newUnitH = (bodyH - bodyH % 100) / 20, newUnitMin = Math.max(Math.min(newUnitW, newUnitH), 20);\n        // if the calcUnitMin != unitSize, update unitSize, recalculate\n        // all DrawAreaObjs, and update the canvas element bounds\n        this.unitSize = newUnitMin;\n        // store Right-most & Bottom-most points for canvas bounds\n        var rightLimit = 0, bottomLimit = 0;\n        for(var i = 0; i < Page.AreaArr.length; i++){\n            Page.AreaArr[i].CalculateBounds();\n            var newRightLimit = Page.AreaArr[i].left + Page.AreaArr[i].W, newBottomLimit = Page.AreaArr[i].top + Page.AreaArr[i].H;\n            rightLimit = Math.max(newRightLimit, rightLimit);\n            bottomLimit = Math.max(newBottomLimit, bottomLimit);\n        }\n        this.cvs.width = rightLimit;\n        this.cvs.height = bottomLimit;\n        // left pos uses Game.W because ideally that area is centered\n        var topPos = (bodyH - bottomLimit) / 2, leftPos = bodyW / 2 - this.Game.W / 2, rightOffset = bodyW - (leftPos + rightLimit) - this.unitSize * 0.5;\n        // if default canvas positioning extends beyond screen, adjust it\n        if (rightOffset < 0) {\n            leftPos = Math.max(this.unitSize * 0.5, leftPos + rightOffset);\n        }\n        this.cvs.style.left = leftPos + \"px\";\n        this.cvs.style.top = topPos + \"px\";\n    },\n    // performs the page setup\n    Initialize: function() {\n        // if page has not been setup, do initial setup\n        if (this.IsSetup === false) {\n            document.body.appendChild(Page.cvs);\n            this.body.style.overflow = \"hidden\";\n            this.body.style.backgroundColor = \"rgb(19,21,25)\";\n            this.cvs.style.position = \"absolute\";\n            this.ctx = this.cvs.getContext(\"2d\");\n            this.IsSetup = true;\n        }\n        this.WindowChanged();\n        // dirty all draw areas\n        for(var i = 0; i < Page.AreaArr.length; i++){\n            Page.AreaArr[i].IsDirty = true;\n        }\n    },\n    // redraws canvas visuals whenever the page is marked as dirty\n    Update: function() {\n        for(var i = 0; i < Page.AreaArr.length; i++){\n            if (Page.AreaArr[i].IsDirty) {\n                Page.AreaArr[i].Draw();\n                Page.AreaArr[i].IsDirty = false;\n            }\n        }\n    }\n};\n// Definition for Area objects. Bounds are in UNITS\nfunction DrawAreaObj(Left, Top, Width, Height, DrawFunction) {\n    // bounds in UNITS\n    this.leftBase = Left;\n    this.topBase = Top;\n    this.widthBase = Width;\n    this.heightBase = Height;\n    // bounds in PIXELS\n    this.left = 0;\n    this.top = 0;\n    this.W = 0;\n    this.H = 0;\n    // dirty flag (clean yourself up flag, you're better than that)\n    this.IsDirty = false;\n    // bounds recalculated and area dirtied when unitSize changes\n    this.CalculateBounds = function() {\n        this.left = this.leftBase * Page.unitSize;\n        this.top = this.topBase * Page.unitSize;\n        this.W = this.widthBase * Page.unitSize;\n        this.H = this.heightBase * Page.unitSize;\n        this.IsDirty = true;\n    };\n    // draw function as passed in by the callee\n    this.Draw = DrawFunction;\n    // push this area into the area arr    \n    Page.AreaArr.push(this);\n}\nPage.Game = new DrawAreaObj(0, 0, 10, 20, function() {\n    // unitSize minus a couple pixels of separation\n    var uDrawSize = Page.unitSize - 2, drawL, drawT;\n    // redraws the background elements for game area\n    Page.ctx.fillStyle = \"rgb(28,30,34)\";\n    Page.ctx.fillRect(this.left, this.top, this.W, this.H);\n    // draw the static unit blocks\n    for(var i = 0; i < GM.StaticUnits.length; i++){\n        for(var j = 0; j < GM.StaticUnits[i].length; j++){\n            // get the unit value for this index pair\n            var uValue = GM.StaticUnits[i][j];\n            // if this unit value is not 0, draw the unit\n            if (uValue !== 0) {\n                drawL = i * Page.unitSize + 1;\n                drawT = j * Page.unitSize + 1;\n                // fill this square with color based on player alive status        \n                Page.ctx.fillStyle = GM.IsAlive ? uValue : \"rgb(34,36,42)\";\n                Page.ctx.fillRect(drawL, drawT, uDrawSize, uDrawSize);\n            }\n        }\n    }\n    // draw the current active projection and piece (if exists)\n    if (GM.Pc.Cur !== 0 && GM.IsAlive) {\n        var projColor = ColorWithAlpha(GM.Pc.Cur.color, 0.1);\n        for(var k = 0; k < GM.Pc.Cur.UO.arr.length; k++){\n            drawL = (GM.Pc.Cur.x + GM.Pc.Cur.UO.arr[k].x) * Page.unitSize + 1;\n            drawT = (GM.Pc.Cur.y + GM.Pc.Cur.UO.arr[k].y) * Page.unitSize + 1;\n            Page.ctx.fillStyle = GM.Pc.Cur.color;\n            Page.ctx.fillRect(drawL, drawT, uDrawSize, uDrawSize);\n            // also draw the projection (if one exists)\n            if (GM.IsAlive && GM.Pc.ProjY !== 0) {\n                drawT += GM.Pc.ProjY * Page.unitSize;\n                Page.ctx.fillStyle = projColor;\n                Page.ctx.fillRect(drawL, drawT, uDrawSize, uDrawSize);\n            }\n        }\n    }\n    // if the player is dead, draw the game over text\n    if (!GM.IsAlive) {\n        DrawText(\"GAME OVER\", \"rgb(255,255,255)\", \"500\", \"center\", uDrawSize, this.W / 2, this.H / 4);\n    }\n});\nPage.UpcomingA = new DrawAreaObj(10.5, 2.6, 2.5, 2.5, function() {\n    var uDrawSize = Math.floor(Page.unitSize / 2), pcA = GM.Pc.Upcoming[0];\n    // next box background\n    Page.ctx.fillStyle = \"rgb(28,30,34)\";\n    Page.ctx.fillRect(this.left, this.top, this.W, this.H);\n    // draw the upcoming piece (if one exists)\n    if (pcA !== 0) {\n        Page.ctx.fillStyle = pcA.color;\n        var totalL = 0, totalT = 0, countedL = [], countedT = [];\n        // calculate average positions of units in order to center\n        for(var i = 0; i < pcA.UO.arr.length; i++){\n            var curX = pcA.UO.arr[i].x, curY = pcA.UO.arr[i].y;\n            if (countedL.indexOf(curX) < 0) {\n                countedL.push(curX);\n                totalL += curX;\n            }\n            if (countedT.indexOf(curY) < 0) {\n                countedT.push(curY);\n                totalT += curY;\n            }\n        }\n        var avgL = uDrawSize * (totalL / countedL.length + 0.5), avgT = uDrawSize * (totalT / countedT.length + 0.5), offsetL = this.left + this.W / 2, offsetT = this.top + this.H / 2;\n        console.log(avgL + \", \" + avgT);\n        // now draw the upcoming piece, using avg vars to center\n        for(var j = 0; j < pcA.UO.arr.length; j++){\n            var drawL = Math.floor(offsetL - avgL + pcA.UO.arr[j].x * uDrawSize), drawT = Math.floor(offsetT - avgT + pcA.UO.arr[j].y * uDrawSize);\n            Page.ctx.fillRect(drawL, drawT, uDrawSize - 1, uDrawSize - 1);\n        }\n    }\n});\nPage.UpcomingB = new DrawAreaObj(10.5, 5.2, 2.5, 2.5, function() {\n    var uDrawSize = Math.floor(Page.unitSize / 2), pcB = GM.Pc.Upcoming[1];\n    // next box background\n    Page.ctx.fillStyle = \"rgb(28,30,34)\";\n    Page.ctx.fillRect(this.left, this.top, this.W, this.H);\n    // draw the upcoming piece (if one exists)\n    if (pcB !== 0) {\n        Page.ctx.fillStyle = pcB.color;\n        var totalL = 0, totalT = 0, countedL = [], countedT = [];\n        // calculate average positions of units in order to center\n        for(var i = 0; i < pcB.UO.arr.length; i++){\n            var curX = pcB.UO.arr[i].x, curY = pcB.UO.arr[i].y;\n            if (countedL.indexOf(curX) < 0) {\n                countedL.push(curX);\n                totalL += curX;\n            }\n            if (countedT.indexOf(curY) < 0) {\n                countedT.push(curY);\n                totalT += curY;\n            }\n        }\n        var avgL = uDrawSize * (totalL / countedL.length + 0.5), avgT = uDrawSize * (totalT / countedT.length + 0.5), offsetL = this.left + this.W / 2, offsetT = this.top + this.H / 2;\n        console.log(avgL + \", \" + avgT);\n        // now draw the upcoming piece, using avg vars to center\n        for(var j = 0; j < pcB.UO.arr.length; j++){\n            var drawL = Math.floor(offsetL - avgL + pcB.UO.arr[j].x * uDrawSize), drawT = Math.floor(offsetT - avgT + pcB.UO.arr[j].y * uDrawSize);\n            Page.ctx.fillRect(drawL, drawT, uDrawSize - 1, uDrawSize - 1);\n        }\n    }\n});\nPage.UpcomingC = new DrawAreaObj(10.5, 7.8, 2.5, 2.5, function() {\n    var uDrawSize = Math.floor(Page.unitSize / 2), pcC = GM.Pc.Upcoming[2];\n    // next box background\n    Page.ctx.fillStyle = \"rgb(28,30,34)\";\n    Page.ctx.fillRect(this.left, this.top, this.W, this.H);\n    // draw the upcoming piece (if one exists)\n    if (pcC !== 0) {\n        Page.ctx.fillStyle = pcC.color;\n        var totalL = 0, totalT = 0, countedL = [], countedT = [];\n        // calculate average positions of units in order to center\n        for(var i = 0; i < pcC.UO.arr.length; i++){\n            var curX = pcC.UO.arr[i].x, curY = pcC.UO.arr[i].y;\n            if (countedL.indexOf(curX) < 0) {\n                countedL.push(curX);\n                totalL += curX;\n            }\n            if (countedT.indexOf(curY) < 0) {\n                countedT.push(curY);\n                totalT += curY;\n            }\n        }\n        var avgL = uDrawSize * (totalL / countedL.length + 0.5), avgT = uDrawSize * (totalT / countedT.length + 0.5), offsetL = this.left + this.W / 2, offsetT = this.top + this.H / 2;\n        console.log(avgL + \", \" + avgT);\n        // now draw the upcoming piece, using avg vars to center\n        for(var j = 0; j < pcC.UO.arr.length; j++){\n            var drawL = Math.floor(offsetL - avgL + pcC.UO.arr[j].x * uDrawSize), drawT = Math.floor(offsetT - avgT + pcC.UO.arr[j].y * uDrawSize);\n            Page.ctx.fillRect(drawL, drawT, uDrawSize - 1, uDrawSize - 1);\n        }\n    }\n});\nPage.ScoreBarHigh = new DrawAreaObj(10.5, 0, 4.5, 1, function() {\n    // draw the score area back bar\n    Page.ctx.fillStyle = \"rgb(28,30,34)\";\n    Page.ctx.fillRect(this.left, this.top, this.W, this.H);\n    // Draw the trophy symbol\n    var miniUnit, left, top, width, height;\n    miniUnit = Page.unitSize * 0.01;\n    Page.ctx.fillStyle = \"rgb(255,232,96)\";\n    // trophy base\n    left = Math.floor(this.left + miniUnit * 33);\n    top = Math.floor(this.top + this.H - miniUnit * 28);\n    width = Math.floor(miniUnit * 30);\n    height = Math.floor(miniUnit * 12);\n    Page.ctx.fillRect(left, top, width, height);\n    // trophy trunk\n    left = Math.floor(this.left + miniUnit * 42);\n    top = Math.floor(this.top + this.H - miniUnit * 50);\n    width = Math.floor(miniUnit * 12);\n    height = Math.floor(miniUnit * 32);\n    Page.ctx.fillRect(left, top, width, height);\n    // trophy bowl\n    left = Math.floor(this.left + miniUnit * 48);\n    top = Math.floor(this.top + this.H - miniUnit * 68);\n    Page.ctx.arc(left, top, miniUnit * 24, 0, Math.PI);\n    Page.ctx.fill();\n    // draw the player's current score\n    text = (\"00000000\" + GM.ScoreHigh).slice(-7);\n    left = this.left + this.W - 4;\n    top = this.top + Page.unitSize * 0.8;\n    size = Math.floor(Page.unitSize * 0.8) + 0.5;\n    DrawText(text, \"rgb(255,232,96)\", \"500\", \"right\", size, left, top);\n});\nPage.ScoreBarCur = new DrawAreaObj(10.5, 1.1, 4.5, 1, function() {\n    // draw the score area back bar\n    Page.ctx.fillStyle = \"rgb(28,30,34)\";\n    Page.ctx.fillRect(this.left, this.top, this.W, this.H);\n    // draw the player's current level\n    var text1, left, top, size1, miniUnit;\n    miniUnit = Page.unitSize * 0.01;\n    text1 = (\"00\" + GM.Level).slice(-2);\n    left = this.left + Math.floor(miniUnit * 50);\n    top = this.top + Page.unitSize * 0.8;\n    size1 = Math.floor(Page.unitSize * 0.5);\n    DrawText(text1, \"rgb(128,128,128)\", \"900\", \"center\", size1, left, top);\n    // draw the player's current score\n    text1 = (\"00000000\" + GM.ScoreCur).slice(-7);\n    left = this.left + this.W - 4;\n    top = this.top + Page.unitSize * 0.8;\n    size1 = Math.floor(Page.unitSize * 0.8) + 0.5;\n    DrawText(text1, \"rgb(255,255,255)\", \"500\", \"right\", size1, left, top);\n});\n//--------------------------------------------------//\n//    GAME MANAGER OBJECT & LOGIC                   //\n//--------------------------------------------------//\nvar GM = {\n    //-- VARS ---------*/\n    // timers\n    TimeCur: 0,\n    TimeEvent: 0,\n    TickRate: 0,\n    // player status & score\n    IsAlive: 0,\n    Level: 0,\n    PiecesRemaining: 0,\n    // score count and current piece score modifiers\n    ScoreHigh: 0,\n    ScoreCur: 0,\n    ScoreBonus: 0,\n    DifficultFlag: 0,\n    // array of grid squares\n    StaticUnits: [],\n    /*-- FCNS ---------*/ // Set up intial game var values\n    Initialize: function() {\n        // reset current piece vars\n        this.Pc.Next = this.Pc.Cur = this.Pc.ProjY = 0;\n        // populate the GM's static unit array with 0's (empty)\n        for(var i = 0; i < 10; i++){\n            this.StaticUnits[i] = [];\n            for(var j = 0; j < 20; j++){\n                this.StaticUnits[i][j] = 0;\n            }\n        }\n        // reset timer\n        this.TimeCur = this.TimeEvent = 0;\n        this.TickRate = 500;\n        // set up level values for level 1\n        this.PiecesRemaining = 10;\n        this.Level = 1;\n        // reset the score and set player to alive\n        this.ScoreCur = 0;\n        this.IsAlive = true;\n    },\n    // updates time each frame and executing logic if a tick has passed\n    Update: function() {\n        this.TimeCur = new Date().getTime();\n        if (this.TimeCur >= this.TimeEvent) {\n            if (GM.Pc.Cur === 0 && this.IsAlive) {\n                this.Pc.Generate();\n            } else {\n                this.Pc.DoGravity();\n                this.Pc.ProjY = this.Pc.TryProject();\n                Page.Game.IsDirty = true;\n            }\n            this.RefreshTimer();\n        }\n    },\n    // reset the tick timer (generates a new TimeEvent target)\n    RefreshTimer: function() {\n        this.TimeEvent = new Date().getTime() + this.TickRate;\n    },\n    // called when a piece is spawned, advances level if needed\n    PieceSpawned: function() {\n        this.PiecesRemaining--;\n        if (this.PiecesRemaining <= 0) {\n            this.AdvanceLevel();\n        }\n    },\n    // advance level, recalculate TickRate, reset pieces remaining\n    AdvanceLevel: function() {\n        this.Level++;\n        this.TickRate = Math.floor(555 * Math.exp(this.Level / -10));\n        this.PiecesRemaining = Math.floor(5000 / this.TickRate);\n        Page.ScoreBarCur.IsDirty = true;\n    },\n    // check specified rows to see if any can be cleared\n    CheckUnits: function(checkRowsRaw) {\n        var scoreMult = 0, pieceScore = 0, checkRows = [];\n        // add the scoreBonus for dropping\n        if (this.ScoreBonus > 0) {\n            pieceScore += this.ScoreBonus;\n        }\n        // sort the rows\n        for(var a = 0; a < 20; a++){\n            if (checkRowsRaw.indexOf(a) >= 0) {\n                checkRows.push(a);\n            }\n        }\n        for(var i = 0; i < checkRows.length; i++){\n            var hasGap = false, checkIndex = checkRows[i];\n            for(var j = 0; j < GM.StaticUnits.length; j++){\n                if (GM.StaticUnits[j][checkIndex] === 0) {\n                    hasGap = true;\n                    break;\n                }\n            }\n            if (hasGap === false) {\n                for(var k = 0; k < GM.StaticUnits.length; k++){\n                    GM.StaticUnits[k].splice(checkIndex, 1);\n                    GM.StaticUnits[k].unshift(0);\n                }\n                pieceScore += 100 + 200 * scoreMult;\n                if (scoreMult > 2) {\n                    pieceScore += 100;\n                }\n                scoreMult++;\n            }\n        }\n        if (this.DifficultFlag === 1) {\n            pieceScore = Math.floor(pieceScore * 1.5);\n            this.DifficultFlag = 0;\n        }\n        if (pieceScore > 0) {\n            this.ScoreCur += pieceScore;\n            Page.ScoreBarCur.IsDirty = true;\n            this.ScoreBonus = 0;\n            if (scoreMult > 3) {\n                this.DifficultFlag = 1;\n            }\n        }\n    },\n    GameOver: function() {\n        Page.Game.IsDirty = Page.ScoreBarCur.IsDirty = true;\n        if (this.ScoreCur > this.ScoreHigh) {\n            this.ScoreHigh = this.ScoreCur;\n            Page.ScoreBarHigh.IsDirty = true;\n            console.log(this.ScoreHigh);\n        }\n        this.IsAlive = false;\n    }\n};\n//--------------------------------------------------//\n//    PIECE OBJECT BUILDER                          //\n//--------------------------------------------------//\n// PcObj is used to create new piece object instances based on the\n// passed in parameters. PcObj is called by predefined templates\nGM.PcObj = function(color, rotCount, units) {\n    this.x = 5;\n    this.y = 0;\n    this.color = color;\n    this.UO = {};\n    // rotate this piece by advancing to next unit obj of linked list\n    this.Rotate = function() {\n        this.UO = this.UO.nextUO;\n    };\n    // set up the piece unit object linked list to define rotations\n    this.SetUO = function(rotCount, units) {\n        var linkedListUO = [];\n        linkedListUO[0] = {\n            nextUO: 0,\n            arr: []\n        };\n        linkedListUO[0].arr = units;\n        for(var i = 0; i < rotCount; i++){\n            var nextI = i + 1 < rotCount ? i + 1 : 0;\n            linkedListUO[i] = {\n                nextUO: 0,\n                arr: []\n            };\n            if (i > 0) {\n                linkedListUO[i - 1].nextUO = linkedListUO[i];\n            }\n            for(var j = 0; j < units.length; j++){\n                var unX, unY;\n                if (i === 0) {\n                    unX = units[j].x;\n                    unY = units[j].y;\n                } else {\n                    unX = linkedListUO[i - 1].arr[j].y * -1;\n                    unY = linkedListUO[i - 1].arr[j].x;\n                }\n                linkedListUO[i].arr[j] = {\n                    x: unX,\n                    y: unY\n                };\n            }\n        }\n        linkedListUO[rotCount - 1].nextUO = linkedListUO[0];\n        this.UO = linkedListUO[0];\n    };\n    this.SetUO(rotCount, units);\n};\n//--------------------------------------------------//\n//    PIECE TYPE TEMPLATES                          //\n//--------------------------------------------------//\n// Templates create a new piece object instance based on\n// their color, rotation count, and unit block definitions.\n// O - Square piece definition\nGM.O = function() {\n    return new GM.PcObj(\"rgb(255,232,51)\", 1, [\n        {\n            x: -1,\n            y: 0\n        },\n        {\n            x: 0,\n            y: 0\n        },\n        {\n            x: -1,\n            y: 1\n        },\n        {\n            x: 0,\n            y: 1\n        }\n    ]);\n};\n// I - Line piece definition\nGM.I = function() {\n    return new GM.PcObj(\"rgb(51,255,209)\", 2, [\n        {\n            x: -2,\n            y: 0\n        },\n        {\n            x: -1,\n            y: 0\n        },\n        {\n            x: 0,\n            y: 0\n        },\n        {\n            x: 1,\n            y: 0\n        }\n    ]);\n};\n// S - Right facing zigzag piece definition\nGM.S = function() {\n    return new GM.PcObj(\"rgb(106,255,51)\", 2, [\n        {\n            x: 0,\n            y: 0\n        },\n        {\n            x: 1,\n            y: 0\n        },\n        {\n            x: -1,\n            y: 1\n        },\n        {\n            x: 0,\n            y: 1\n        }\n    ]);\n};\n// Z - Left facing zigzag piece definition\nGM.Z = function() {\n    return new GM.PcObj(\"rgb(255,51,83)\", 2, [\n        {\n            x: -1,\n            y: 0\n        },\n        {\n            x: 0,\n            y: 0\n        },\n        {\n            x: 0,\n            y: 1\n        },\n        {\n            x: 1,\n            y: 1\n        }\n    ]);\n};\n// L - Right facing angle piece definition\nGM.L = function() {\n    return new GM.PcObj(\"rgb(255,129,51)\", 4, [\n        {\n            x: -1,\n            y: 0\n        },\n        {\n            x: 0,\n            y: 0\n        },\n        {\n            x: 1,\n            y: 0\n        },\n        {\n            x: -1,\n            y: -1\n        }\n    ]);\n};\n// J - Left facing angle piece definition\nGM.J = function() {\n    return new GM.PcObj(\"rgb(64,100,255)\", 4, [\n        {\n            x: -1,\n            y: 0\n        },\n        {\n            x: 0,\n            y: 0\n        },\n        {\n            x: 1,\n            y: 0\n        },\n        {\n            x: 1,\n            y: -1\n        }\n    ]);\n};\n// T - Hat shaped piece definition\nGM.T = function() {\n    return new GM.PcObj(\"rgb(160,62,255)\", 4, [\n        {\n            x: -1,\n            y: 0\n        },\n        {\n            x: 0,\n            y: 0\n        },\n        {\n            x: 1,\n            y: 0\n        },\n        {\n            x: 0,\n            y: -1\n        }\n    ]);\n};\n//--------------------------------------------------//\n//    ACTIVE PIECE CONTROLLER                       //\n//--------------------------------------------------//\n// Controls the generation, movement, and placement of piece \n// objects. Monitors the current piece and upcoming piece\nGM.Pc = {\n    //-- VARS ---------*/\n    // current piece, projected Y pos of cur piece  \n    Cur: 0,\n    ProjY: 0,\n    // upcoming pieces\n    Upcoming: [\n        0,\n        0,\n        0\n    ],\n    //-- FCNS ---------*/\n    // push upcoming piece to current & randomize new upcoming piece\n    Generate: function() {\n        // push upcoming piece to current and push down other upcomings\n        this.Cur = this.Upcoming[0];\n        this.Upcoming[0] = this.Upcoming[1];\n        this.Upcoming[1] = this.Upcoming[2];\n        // check if the player lost\n        if (this.Cur !== 0) {\n            var spawnCollisions = this.CheckCollisions(0, 0, 0);\n            if (spawnCollisions > 0) {\n                GM.GameOver();\n                this.Freeze();\n            }\n        }\n        // if player is alive, generate random upcoming piece\n        if (GM.IsAlive !== 0) {\n            var randInt = Math.floor(Math.random() * 7);\n            switch(randInt){\n                case 0:\n                    this.Upcoming[2] = GM.O();\n                    break;\n                case 1:\n                    this.Upcoming[2] = GM.I();\n                    break;\n                case 2:\n                    this.Upcoming[2] = GM.S();\n                    break;\n                case 3:\n                    this.Upcoming[2] = GM.Z();\n                    break;\n                case 4:\n                    this.Upcoming[2] = GM.L();\n                    break;\n                case 5:\n                    this.Upcoming[2] = GM.J();\n                    break;\n                case 6:\n                    this.Upcoming[2] = GM.T();\n                    break;\n                default:\n                    break;\n            }\n            // if a current piece was set, inform the GM\n            if (this.Cur !== 0) {\n                GM.PieceSpawned();\n                Page.Game.IsDirty = true;\n            }\n            Page.UpcomingA.IsDirty = Page.UpcomingB.IsDirty = Page.UpcomingC.IsDirty = true;\n        }\n    },\n    // freeze the current piece's position and rotation\n    Freeze: function() {\n        if (GM.IsAlive) {\n            var affectedRows = [];\n            for(var i = 0; i < this.Cur.UO.arr.length; i++){\n                var staticX = this.Cur.x + this.Cur.UO.arr[i].x, staticY = this.Cur.y + this.Cur.UO.arr[i].y;\n                if (staticY >= 0 && staticY <= GM.StaticUnits[0].length) {\n                    GM.StaticUnits[staticX][staticY] = this.Cur.color;\n                }\n                if (affectedRows.indexOf(staticY) < 0) {\n                    affectedRows.push(staticY);\n                }\n            }\n            GM.CheckUnits(affectedRows);\n            this.Generate();\n        }\n    },\n    // apply gravity to the current piece, checking for collisions\n    DoGravity: function() {\n        if (this.Cur !== 0) {\n            var collisions = this.CheckCollisions(0, 0, 1);\n            if (collisions === 0) {\n                this.Cur.y++;\n            } else {\n                this.Freeze();\n            }\n        }\n        GM.RefreshTimer();\n    },\n    // attempt to rotate the current piece, returns bool\n    TryRotate: function() {\n        if (this.Cur !== 0) {\n            var collisions = this.CheckCollisions(1, 0, 0);\n            if (collisions === 0) {\n                this.Cur.Rotate();\n                return true;\n            }\n        }\n        return false;\n    },\n    // attempt to move current piece base on given XY, returns bool\n    TryMove: function(moveX, moveY) {\n        if (this.Cur !== 0) {\n            var collisions = this.CheckCollisions(0, moveX, moveY);\n            if (collisions === 0) {\n                this.Cur.x += moveX;\n                this.Cur.y += moveY;\n                if (moveY > 0) {\n                    GM.RefreshTimer();\n                    GM.ScoreBonus++;\n                }\n                return true;\n            }\n        }\n        return false;\n    },\n    // attempt to drop the current piece until it collides, returns bool\n    TryDrop: function() {\n        var squaresDropped = 0;\n        if (this.Cur !== 0) {\n            while(this.TryMove(0, 1) === true && squaresDropped < 22){\n                squaresDropped++;\n            }\n        }\n        if (squaresDropped > 0) {\n            GM.ScoreBonus += 2 * squaresDropped;\n            this.Freeze();\n            return true;\n        } else {\n            return false;\n        }\n    },\n    // attempt to find (and return) projected drop point of current piece\n    TryProject: function() {\n        var squaresDropped = 0;\n        if (this.Cur !== 0) {\n            while(this.CheckCollisions(0, 0, squaresDropped) === 0 && squaresDropped < 22){\n                squaresDropped++;\n            }\n        }\n        return squaresDropped - 1;\n    },\n    // return collision count OR -1 if test piece out of bounds\n    CheckCollisions: function(doRot, offsetX, offsetY) {\n        var unitArr, collisionCount = 0;\n        if (doRot === 1) {\n            unitArr = this.Cur.UO.nextUO.arr;\n        } else {\n            unitArr = this.Cur.UO.arr;\n        }\n        for(var i = 0; i < unitArr.length; i++){\n            var testX = this.Cur.x + unitArr[i].x + offsetX, testY = this.Cur.y + unitArr[i].y + offsetY, limitX = GM.StaticUnits.length, limitY = GM.StaticUnits[0].length;\n            if (testX < 0 || testX >= limitX || testY >= limitY) {\n                return -1;\n            } else if (testY > 0) {\n                if (GM.StaticUnits[testX][testY] !== 0) {\n                    collisionCount++;\n                }\n            }\n        }\n        return collisionCount;\n    }\n};\n//--------------------------------------------------//\n//    EVENT LISTENERS                               //\n//--------------------------------------------------//\n// Event for keyboard calls the corresponding manipulation functions\n// in GM.Pc based on user inputs. If manipulation is successful,\n// the page is marked as dirty.\ndocument.addEventListener(\"keydown\", function(evt) {\n    var key = event.keyCode || event.which;\n    if (GM.IsAlive) {\n        switch(key){\n            // Up arrow OR W = rotate     \n            case 38:\n            case 87:\n                Page.Game.IsDirty = GM.Pc.TryRotate();\n                break;\n            // Left arrow OR A = move left\n            case 37:\n            case 65:\n                Page.Game.IsDirty = GM.Pc.TryMove(-1, 0);\n                break;\n            // Right arrow OR D = move right  \n            case 39:\n            case 68:\n                Page.Game.IsDirty = GM.Pc.TryMove(1, 0);\n                break;\n            // Down arrow OR S = move down  \n            case 40:\n            case 83:\n                Page.Game.IsDirty = GM.Pc.TryMove(0, 1);\n                break;\n            // Spacebar to drop the current piece\n            case 32:\n                Page.Game.IsDirty = GM.Pc.TryDrop();\n                break;\n            default:\n                break;\n        }\n        //if board was dirtied, cast fresh projection for current piece\n        if (Page.Game.IsDirty) {\n            GM.Pc.ProjY = GM.Pc.TryProject();\n        }\n    } else {\n        Init();\n    }\n}, false);\n// Window resize event calls Page function to update the canvas \n// size/position, area bounds within the canvas, and the unitSize\nwindow.onresize = function(event1) {\n    Page.WindowChanged();\n};\n//--------------------------------------------------//\n//    INITIALAZATION AND GAME LOOP                  //\n//--------------------------------------------------//\n// Called on page load / game reset, Init fcn initializes \n// the Page and GM objects, then starts the main game loop.\nfunction Init() {\n    // initialize the page object\n    Page.Initialize();\n    // initialize the GM object\n    GM.Initialize();\n}\nInit();\n// Main game loop. Updates GM object to check if tick can be\n// performed. Then, if the page is dirty, performs a Draw.\nfunction Loop() {\n    // always update Page\n    Page.Update();\n    // only need to update GM if the player is alive\n    if (GM.IsAlive) {\n        GM.Update();\n    }\n    window.requestAnimationFrame(Loop);\n}\nLoop();\n//--------------------------------------------------//\n//    HELPER FUNCTIONS                              //\n//--------------------------------------------------//\nfunction DrawText(text1, color, weight, alignment, size1, left, top) {\n    Page.ctx.font = weight + \" \" + size1 + 'px \"Jura\", sans-serif';\n    Page.ctx.textAlign = alignment;\n    Page.ctx.fillStyle = color;\n    Page.ctx.fillText(text1, left, top);\n}\nfunction ColorWithAlpha(color, alpha) {\n    var retColor = \"rgba\" + color.substring(3, color.length - 1);\n    retColor += \",\" + alpha + \")\";\n    return retColor;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/tetris/page.jsx\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/tetris/page.jsx"));
module.exports = __webpack_exports__;

})();